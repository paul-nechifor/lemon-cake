# # LemonCake
#
# A programming language that combines the speed of Ruby, with the flexibility
# of Assembly and the consistency of Lisp.
(= + (~ (reduce add $args)))
(= - (~ (reduce sub $args)))
(= * (~ (reduce mul $args)))
(= / (~ (reduce div $args)))
(= | (~ (reduce binor $args)))
(= & (~ (reduce binand $args)))
(= join (~ (reduce join-lists $args)))

(= partial (~ (fn) (last
  (= args (tail $args))
  (~ (apply fn (join args $args)))
)))

# ### tie
#
# Joins strings using a separator.
#
# Example:
#
# > (tie '_' :('a' 'b' 'c'))
# > >'a_b_c'
(= tie (~ (str xs)
  (apply cat (tail (apply join (map xs
    (~ (x) (list str x))
  ))))
))

(= reg0 (dict
  'al' 0
  'cl' 1
  'dl' 2
  'bl' 3
  'ah' 4
  'ch' 5
  'dh' 6
  'bh' 7
))

(= asm-instr (dict
  'add' (~ (a b) (if

    (and (in a reg0) (in b reg0))
    (list 0x00 (| 0xc0 (<< (get reg0 b) 3) (get reg0 a) ))

  ))
))

(= split-parts (~ (str) (last
  (= left (dict 0 ''))
  (= right (dict))
  (= n 0)
  (= prev-is-left 1)

  (map (split '\n' str) (~ (l) (last
    (= lsplit (split '' l))
    (= is-left (is (at lsplit 0) '#'))
    (if is-left
      (if prev-is-left
        (set left n (cat (get left n) '\n' (apply cat (tail lsplit))))
        (last
          (= n (+ n 1))
          (set left n (apply cat (tail lsplit)))
        )
      )
      (if prev-is-left
        (set right n l)
        (set right n (cat (get right n) '\n' l))
      )
    )
    (= prev-is-left is-left)
  )))

  (cat
    '<div class="doc">'
    (apply cat (map (range (+ n 1)) (~ (i) (cat
      '<div class="sect">'
        '<div class="part left"><div class="text">'
          (get left i)
        '</div></div>'
        '<div class="part right"><div class="code">'
          (get right i)
        '</div></div>'
      '</div>'
    ))))
    '</div>'
  )
)))

(= doc-code (~ (input output) (last
  (= trans (~ (d) (last
    (apply cat (map
      (split '' d)
      (~ (x) (if (is x '<') '&lt;' (is x '>') '&gt;' x))
    ))
  )))
  (fs-write output (cat
    '<!doctype html>'
    '<html>'
      '<head>'
        '<title>LemonCake</title>'
        '<style>'
          'div{box-sizing:border-box}'
          'body{margin:0}'
          '.sect{clear:both}'
          '.part{width:50%;padding-top:20px}'
          '.left{float:left}'
          '.right{float:right;background:#f4f4f4}'
          '.text{width:100%;max-width:600px;padding-right:10px;float:right}'
          '.code{padding-left:10px;font-family:monospace;white-space:pre}'
        '</style>'
      '</head>'
      '<body>'
        (split-parts (trans (fs-read input)))
      '</body>'
    '</html>'
  ))
)))

(= repeat (~ (x n) (map (range n) (~ x))))

(= at (~ (l i) (head ((apply comp (repeat tail i)) l))))

(= comp (~ (eval
  (list :~ :(x) (join
    :(last)
    (map $args (~ (fn)
      (list := :x (list fn :x))
    ))
    :(x)
  ))
)))
